#+title: Project scheduling for REG

This document proposes a new system to help REG manage project scheduling, staff
assignments, time recording, and billing.

* History

** Early days

In the beginning, REG had so few people that no formal project-management
process was required. However, once we had grown beyond a few people we needed
some way to keep track of who was doing what project and to plan for upcoming
projects. We repurposed a moveable whiteboard, and divided the board with tape
into a planning grid: months across the columns and projects down the rows. We
wrote the names of the staff members assigned to a project in the cells
corresponding to particular months.

This simple board served us well for a while but at some point became
unwieldy. It was too easy inadvertently to assign someone to more projects than
they had time to do. It was also easy to miss out someone completely.

Our next approach retained the whiteboard planning grid but replaced written
assignments with pieces of paper held on to the board with magnets. Each piece
of paper identified 0.5 person-months of effort, and was labelled with a month
and a person. We made two pieces of paper for a given month and individual,
corresponding to one person-month. An example of the board decorated with
projects and assingments is shown in figure 1. 

#+caption: “The board”, version 2 (early 2018).
#+attr_latex: :width 3in
[[./the-board.jpg]]

This approach worked very well. It was not possible to over-assign people (since
there were only two pieces of paper for any given month) and by looking at the
pile of paper remaining one could see how many people were available. Empty
cells indicated projects that required staffing. Perhaps surprisingly, the
“analogue” nature of the board was also an advantage. It turned out to be
unexpectedly useful to be able to stand around the board discussing upcoming
projects. Everything was immediately visible and comprehensible. People could
move "their" pieces of paper around to make improvements in the assignments. Not
only that, but it was a very effective way to introduce visitors to the team's
work.

However, the team continued to grow. At the point where we were using three
whiteboards---including the reverse sides---we decided to move to an electronic
system. The present system is built around a commercial, SaaS system called
"Harvest Forecast".[fn:1]

** The present

The present system has three parts:

1. For /overall project management/ we use [[https://github.com/alan-turing-institute/Hut23/projects/2][the `Project Tracker']], a kanban board
   attached to the hut23 repository on GitHub. (Confusingly, GitHub calls a
   kanban board a “Project.”)  Each project gets a GitHub “issue,” which comes
   with an auto-generated issue number. The issue number is the primary means of
   individuating projects within REG.

   Each issue lives in a particular column of the kanban board, representing the
   present stage of the project. At the time of writing, we have ten stages (see
   table below).

   Within the issue itself we maintain metadata about the projects---the people
   involved, the total budget and timing constraints---as well as a
   chronological record of communications about the project. We also use the
   issue as a place to attach team members’ preferences. None of this metadata
   is easily parsed by machine, although we have recently made efforts to add,
   at the top of the issue, [[https://github.com/alan-turing-institute/Hut23/blob/master/.github/ISSUE_TEMPLATE/project.md][a metadata block]] containing the critical information
   for each project.

   Update (2022): We've made some explorations with GitHub's ``new-style''
   project boards. These allow you to add your own fields (from a restricted set
   of types) to the issues on the board and are perhaps a good place to store
   project metadata. (Assuming we can figure out the SparQL interface.)

2. For /scheduling/ and /billing/ we use [[https://forecastapp.com/974183/schedule/projects][Forecast]]. Roughly speaking, this
   web-based service maintains a list of /assignments/: that is, allocations of
   an individual's time to a project over a given period. Since Forecast records
   what we ought to be spending our time on, we also use it for billing. When we
   come to to decide how much to charge projects we look at the past
   allocations in Forecast. 

   We have also used Forecast to try to schedule projects. However, this is
   complicated by the fact that there is no ``project budget'' facility in
   Forecast: There is no place to record start and end dates or resourcing needs
   for projects that are not yet staffed. (This is why this information is in
   the Project Tracker.) We have found a work-around by assigning a nominal
   staff member (known in Forecast as a ``Placeholder'') called ``People
   required.'' When a real team-member is assigned to the project, the ``People
   required'' placeholder is removed. However, this approach has lately been
   made more difficult by the decision to move to staffing levels that are not
   necessarily multiples of 50% of an FTE as this implies that a person will not
   necessarily be a one-to-one replacement for the placeholder.

3. For historic /time tracking/ we use [[https://thealanturinginstitute.harvestapp.com/time/week][Harvest]], a system linked to Forecast. We
   make some efforts to use Harvest to track our /actual/ time, including
   various duties that are not billed to projects because they are part of
   "business as usual."  Every once in a while we review Harvest to ensure that
   what we said we were going to do (in Forecast) is roughly what we actually
   did. If there are large discrepancies, we discuss these and if necessary
   change Forecast retroactively to match reality.

#+caption: The ten stages of a project (as at present).
#+begin_table
| Stage | Name                   | Description                                   |
|-------+------------------------+-----------------------------------------------|
|     1 | Suggested              | Someone heard a rumour                        |
|     2 | Proposal               | Someone is writing a proposal                 |
|     3 | Project brief complete | We have received a project brief to consider  |
|     4 | With funder            | Appoved by REG; awaiting funding confirmation |
|     5 | Finding resources      | REG is finding individuals to assign          |
|     6 | Awaiting start         | Project is ready to go                        |
|     7 | Active                 |                                               |
|     8 | Completion review      | We don't do this as much as we should         |
|     9 | Done                   |                                               |
|    10 | Cancelled              |                                               |
#+end_table

In addition, we have written a number of scripts under the collective name
“[[https://wimbledon-planner.azurewebsites.net/][project Wimbledon]].” These (a) summarise staffing allocations by project and
person, to some extent reproducing the board in a way that allows us to print it
out on a very large sheet of paper; (b) collect in one place the individual
preferences; (c) produce a forward look of supply against demand.

We have now reached the limits of the present system. There are three main
problems with the current approach:

1. The projects in GitHub, Forecast, and Harvest are connected only though the
   issue number and all the connections are manual. In particular, Forecast has
   no access to the project metadata from the GitHub issue and (perhaps more
   surprisingly) it does not make use of the budgeting data from Harvest
   either. For example, in order to indicate, on Forecast, that a project exists
   before someone is assigned to it, it is necessary to add a placeholder
   allocation (linked to a fictitious individual).

2. There's no automated way to summarise project status beyond
   Wimbledon. Project leads must manually check to see that their projects are
   on budget, for example (and typically this does not happen). We don't have
   confidence that everything is on track.

3. The process of actually scheduling individuals onto projects is /extremely/
   time-consuming and borderline unworkable at our present scale. Furthermore,
   there is no history of changes: when an assignment is changed in Forecast,
   there is no record of what was there before or why the change was made.


** Desiderata for a future system

- Timely “warnings” and alerts. For example, before projects are due to start or
  end, when resourcing is not on track.

- Periodic summaries

- Who's doing what

- What am I supposed to be doing next?


* The plan for a new system

** Overview

It is probably best to make changes incrementally. The following is a
three-phase plan.

- Phase 1 :: Extend Wimbledon with reports, especially ones that verify the
             consistency of the current schedule and that warn of upcoming
             problems.

- Phase 2 :: Create a new system to manage the information about projects,
             including the history of changes to scheduling.

- Phase 3 :: Automate scheduling of projects.

** Data model

The following are entities in the model: /programme/, /person/, /project/, and
/assignment/. Persons represent members of staff; projects are the things to
which they might be assigned; and assignments connect projects and persons over
some period. Programmes are categories of projects; but the meaning is somewhat
fluid.

Forecast is authoritative for persons (the "Team," in Forecast's language),
which are individuated by Forecast identifers, and for assignments. GitHub is
authoritative for projects, which are individiated by issue numbers: A project
is any issue on the [[https://github.com/alan-turing-institute/Hut23/projects/2][Project Tracker]] or [[https://github.com/alan-turing-institute/Hut23/projects/8][Standing Roles]] tracker. However, some
data about persons may exist on GitHub (for example, the identity of the project
lead or the Programme lead); and projects are of course used on Forecast to
manage individual assignments.

All projects on Forecast have their GitHub issue number recorded as the Forecast
"Project Code" and this is how we identify projects across those two
systems. Conversely, all persons on Forecast have an email address which we use
to identify them (as people!); however, since people don't have to use the same
email on GitHub as they do on Forecast, we will need a separate lookup table of
GitHub usernames, at least for Programme leads.

A **Client** on Forecast is:
1. A Forecast identifier.
2. A name

We have mostly used Clients as a synonym for Turing Programmes. On Forecast,
each project belongs to one and only one Client. However, some projects in the
Turing span Programmes. Typically this is because these projects were funded by
the ASG arrangement; however, although we do have a Client "ASG", the actual ASG
is /not/ a Programme, it is a funding source.

Clients are currently reported on the ``recharge pro forma,'' the register of
allocations which we give to PMU and Finance monthly for the purpose of cost
recovery. On the pro forma we label Clients as ``Programmes''. PMU look for
``their'' projects by reference to the Client (which they interpret as being a
Programme) so ideally Client should refer to whatever PMU recognises. However,
this is not always possible for the reason above and, in those cases, Client can
mean "Funder".

However, for the recharge pro forma, it's not actually /critical/ that Client
matches some real-world thing: the Finance code does all the heavy lifting in
identifying where the funding is coming from.

It would be nice if a **Programme** (in whatnow) was:

- A Client on Forecast;
- A tag representing a Programme on GitHub;
- The GitHub issue representing a Programme Lead service area.
1. Optionally, a GitHub issue number for the appropriate "Programme Lead Service
   Area"
2. A set, possibly empty, of tags that are used on GitHub to identify the
   Programme(s) of a project.


A **Project** is:
1. A GitHub issue number. (On Forecast, these are coded as ~hut23-NNN~ where
   ~NNN~ is the issue number.)
2. A Forecast identifier.
3. Optionally, the Harvest identifier of this project in Harvest.
4. Optionally, the Forecast identifier of the corresponding Client in Forecast.
5. A name, which may be empty.
6. A list, which may be empty, of "Tags", which we have used to list the Finance
   Codes that are allowed for this project.
7. A note, which may be empty, which we use to store the URL of the
   corresponding GitHub issue.

Note that there are two projects of the form ~hut23-NNN/V~ where ~V~ is 1
or 2. These are each the component parts of a single project, which we have
split for some reason.

There is a single, special, built-in project on Forecast, called **Time Off**,
which is non-editable and obviously has no GitHub issue number. There should be
no allocations to this project and it should be the sole project without an
issue number.

A **Person** is:
1. A Forecast identifier.
2. Optionally, a Harvest identifier.
3. Optionally, an email address.
4. A first name and a last name, both optional.
5. A list, possibly empty, of roles. A role is one a finite set of strings that
   we use internally to denote: whether the person is REG or a Partner; if REG,
   their title and level; and if a Partner, the partner institution.

Also available from Forecast but possibly not useful is:
- A boolean, indicating whether this person can log in to Forecast.

People are assigned to projects at a certain rate on certain days. (We deal in
no unit of time smaller than a day. Ideally, we would not use any unit of time
more granular than an ISO 8601 week, but Forecast does not enforce this. We do
try to make projects start on Monday and end on Sunday, the first and last days
of an ISO week.)

A **rate** is a rational fraction of a nominal 8h working day. An **allocation**
is a map from days to rates. An **assignment** is:
1. a project;
2. a person;
3. a Finance code (which may be the special value ~None~); and
4. an allocation.

A **schedule** is a set of assignments such that the total rate for each person
on a given day does not exceed 1.

In fact, Forecast does not represent allocations as maps. People tend to remain
with a project for an extended duration rather than switch every day and their
rate of allocation tends to be constant. So for space reasons Forecast stores
blocks of allocations.

A **period** is a contiguous range of dates (probably best to store as start
date plus number of days).[fn:2] An **simple allocation** is an allocation that
is zero except in a given period, where it is constant. A simple allocation can
be represented as a period, together with a rate. What one obtains from Forecast
are simple allocations.

Note that any allocation can be represented as the ``sum'' of a set of simple
allocations.

Forecast is authoritative for assignments; however there are some implementation
details. In Forecast, there isn't a special field for the Finance code. What we
do is use the ``project level'' code, if there is one; otherwise we put the code
in notes field of the allocation. The assignment rate on Forecast is specified
in hours per day (although actually I think it might be stored in seconds) and
/must/ be strictly greater than zero. For assignment purposes, we use a nominal
8-hour day (or 40-hour week).

Some Forecast Team-members are not actually ``available'' (for example, because
they have left the team) and some people are on reduced-hours contracts
(typically 80%). We do not store a person’s total “availability” anywhere: it is
always assumed to be 40 hours per week. Instead, we assign such a person wholly
or partially to the nominal project “UNAVAILABLE” and this time contributes to
their total assigned time.

** A possible module structure

- Command-line interface
  - Tabular formatting
  - Other output formats formatting
  - Logging?
  - Schedules
    - Functional interface to Forecast
      - Raw interface to Forecast
    - Functional interface to GitHub
      - Raw interface to GitHub
    - Check consistency of external systems
    - Check internal consistency of schedule
    - Utilities for periods (splitByWeek, monthOfWeek, aggregate, split,
      before?, after?, duration, addToDate)
    - Utilities for allocations (sum)

For future
- Persisting data locally
- Diffs


** Some ideas for reporting 

 - you (or someone on your team) is not allocated 100%;
 - your project (if you are the project lead) is not staffed 100%;
 - there is a discrepancy between what Forecast says someone should be doing and
   what they say they're doing on Harvest;
 - the project is not on track against budget;
 - your project is missing metadata;
 - the same, for projects in your Programme;
 - it is now six months before the start of the project and we do not have
   confirmation of funding.


** Notes for Hack Week

*** Day 1 planning

- Get dotnet, clone repo
- Intro to module structure in F#
- Intro to project organisation in F#
- Intro to fsi repl (& how to run modules from repl?)
- Outline module structure
- 

*** Day 2 planning

- Q&A with our expert
- What we're stuck on
- Docs
  


* Other systems

** RSEAdmin: The one from Sheffield

The Sheffield RSE team have also written their own planning tool: [[https://rseadmin.readthedocs.io/en/latest/][RSE admin
tool]]. It is for, “[...] tracking grant applications, managing RSE
commitment and reporting on staff expenses and cost recovery.” It is written
in Python as a web app; there is usage and installation documentation, but I
could not find much on the data model. 


* Dates

Weeks begin on Monday. The week number is the position of a week within a year:
a week falls into a given calendar year if, and only if, the Thursday of that
week falls in the year. Likewise, a week falls within a given month if, and only
if, the Thursday of the week falls in the month. Years have either 52 or 53
weeks. 

* Footnotes

[fn:1] https://www.getharvest.com/forecast. I think the company initially built
a timesheet system called “Harvest” (which we also use) and then extended it
with a planning system.

[fn:2] [[https://www.joda.org/joda-time/key.html][Joda]] is a well-thought-through Java library for managing dates and
times. It was the basis Hadley Wickham's [[https://lubridate.tidyverse.org/][lubridate]] package for R. These packages
carefully define various concepts relating to time: the one that corresponds to
our use of "period" is what they call an "interval". They reserve "period" for
a length of time that is not "tied down" to a particular starting instant.  

[fn:3] In practice, there seems to be bug in the Forecast front end where,
occasionally, entering an assignment will produce an error message indicating
that the entered assignment overlaps with an existing one (which is forbidden by
the constraint) but where there is no such overlap.
